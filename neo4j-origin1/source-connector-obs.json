{
    "name": "Neo4jSourceConnectorOrigin1_Observationsâˆ«",
    "config": {
      "connector.class": "org.neo4j.connectors.kafka.source.Neo4jConnector",
      "key.converter": "io.confluent.connect.json.JsonSchemaConverter",
      "key.converter.schemas.enable": true,
      "key.converter.schema.registry.url": "http://schema-reg:8081",
      "value.converter": "io.confluent.connect.json.JsonSchemaConverter",
      "value.converter.schemas.enable": true,
      "value.converter.schema.registry.url": "http://schema-reg:8081",
      "neo4j.uri": "neo4j://neo4j-origin1:7687",
      "neo4j.authentication.type": "BASIC",
      "neo4j.authentication.basic.username": "neo4j",
      "neo4j.authentication.basic.password": "password",
      "neo4j.source-strategy": "QUERY",
      "neo4j.start-from": "NOW",
      "neo4j.query": "MATCH (p:Patient)-[:HAS]->(o:Observation) WHERE o.timestamp.epochMillis > $lastCheck RETURN o.id AS observationId, o.temperature AS temperature, p.id AS patientId, o.timestamp.epochMillis AS timestamp",
      "neo4j.query.streaming-property": "timestamp",
      "neo4j.query.topic": "observations",
      "neo4j.query.polling-interval": "1s",
      "neo4j.query.polling-duration": "5s"
    }
  }
  